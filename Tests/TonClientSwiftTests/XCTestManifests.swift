#if !canImport(ObjectiveC)
import XCTest

extension AbiTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__AbiTests = [
        ("testAttach_signature", testAttach_signature),
        ("testDecode_message_body", testDecode_message_body),
        ("testDecode_messageEventType", testDecode_messageEventType),
        ("testDecode_messageInputType", testDecode_messageInputType),
        ("testDecode_messageOutputType", testDecode_messageOutputType),
        ("testEncode_account", testEncode_account),
        ("testEncode_message_body", testEncode_message_body),
        ("testEncode_messageWithExternalSigner", testEncode_messageWithExternalSigner),
        ("testEncode_messageWithKeysSigner", testEncode_messageWithKeysSigner),
    ]
}

extension BindingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BindingTests = [
        ("testConvertFromTSDKString", testConvertFromTSDKString),
        ("testConvertToTSDKString", testConvertToTSDKString),
        ("testRequestLibraryAsync", testRequestLibraryAsync),
    ]
}

extension BocTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__BocTests = [
        ("testGet_blockchain_config", testGet_blockchain_config),
        ("testGet_boc_hash", testGet_boc_hash),
        ("testParse_account", testParse_account),
        ("testParse_block", testParse_block),
        ("testParse_message", testParse_message),
        ("testParse_transaction", testParse_transaction),
    ]
}

extension ClientTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ClientTests = [
        ("testBuild_info", testBuild_info),
        ("testGet_api_reference", testGet_api_reference),
        ("testVersion", testVersion),
    ]
}

extension CryptoTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CryptoTests = [
        ("testChacha20", testChacha20),
        ("testConvert_public_key_to_ton_safe_format", testConvert_public_key_to_ton_safe_format),
        ("testFactorize", testFactorize),
        ("testGenerate_random_bytes", testGenerate_random_bytes),
        ("testGenerate_random_sign_keys", testGenerate_random_sign_keys),
        ("testHdkey_derive_from_xprv_path", testHdkey_derive_from_xprv_path),
        ("testHdkey_derive_from_xprv", testHdkey_derive_from_xprv),
        ("testHdkey_public_from_xprv", testHdkey_public_from_xprv),
        ("testHdkey_secret_from_xprv", testHdkey_secret_from_xprv),
        ("testHdkey_xprv_from_mnemonic", testHdkey_xprv_from_mnemonic),
        ("testMnemonic_derive_sign_keys", testMnemonic_derive_sign_keys),
        ("testMnemonic_from_entropy", testMnemonic_from_entropy),
        ("testMnemonic_from_random", testMnemonic_from_random),
        ("testMnemonic_verify", testMnemonic_verify),
        ("testMnemonic_words", testMnemonic_words),
        ("testModular_power", testModular_power),
        ("testNacl_box_keypair_from_secret_key", testNacl_box_keypair_from_secret_key),
        ("testNacl_box_keypair", testNacl_box_keypair),
        ("testNacl_box_open", testNacl_box_open),
        ("testNacl_box", testNacl_box),
        ("testNacl_secret_box_open", testNacl_secret_box_open),
        ("testNacl_secret_box", testNacl_secret_box),
        ("testNacl_sign_detached", testNacl_sign_detached),
        ("testNacl_sign_keypair_from_secret_key", testNacl_sign_keypair_from_secret_key),
        ("testNacl_sign_open", testNacl_sign_open),
        ("testNacl_sign", testNacl_sign),
        ("testScrypt", testScrypt),
        ("testSha256", testSha256),
        ("testSha512", testSha512),
        ("testSign", testSign),
        ("testTon_crc16", testTon_crc16),
        ("testVerify_signature", testVerify_signature),
    ]
}

extension NetTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__NetTests = [
        ("testQuery_collection", testQuery_collection),
        ("testSubscribe_collection", testSubscribe_collection),
        ("testUnsubscribe", testUnsubscribe),
        ("testWait_for_collection", testWait_for_collection),
    ]
}

extension ProcessingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ProcessingTests = [
        ("testProcess_mesage", testProcess_mesage),
        ("testWait_for_transaction", testWait_for_transaction),
    ]
}

extension TvmTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TvmTests = [
        ("testRun_account_none", testRun_account_none),
        ("testRun_account_uinit", testRun_account_uinit),
        ("testRun_executor", testRun_executor),
        ("testRun_getCompute_returned_stake", testRun_getCompute_returned_stake),
        ("testRun_getParticipantList", testRun_getParticipantList),
        ("testRun_getPast_elections", testRun_getPast_elections),
        ("testRun_tvm", testRun_tvm),
    ]
}

extension UtilsTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__UtilsTests = [
        ("testAccountIdToAccountId", testAccountIdToAccountId),
        ("testAccountIdToHex", testAccountIdToHex),
        ("testBase64ToBase64URL", testBase64ToBase64URL),
        ("testBase64URLToHex", testBase64URLToHex),
        ("testHexToBase64", testHexToBase64),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(AbiTests.__allTests__AbiTests),
        testCase(BindingTests.__allTests__BindingTests),
        testCase(BocTests.__allTests__BocTests),
        testCase(ClientTests.__allTests__ClientTests),
        testCase(CryptoTests.__allTests__CryptoTests),
        testCase(NetTests.__allTests__NetTests),
        testCase(ProcessingTests.__allTests__ProcessingTests),
        testCase(TvmTests.__allTests__TvmTests),
        testCase(UtilsTests.__allTests__UtilsTests),
    ]
}
#endif
